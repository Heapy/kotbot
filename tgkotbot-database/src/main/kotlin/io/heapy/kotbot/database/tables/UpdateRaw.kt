/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbot.database.tables


import io.heapy.kotbot.database.Public
import io.heapy.kotbot.database.keys.UPDATE_RAW_PK
import io.heapy.kotbot.database.tables.records.UpdateRawRecord

import java.time.LocalDateTime
import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UpdateRaw(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UpdateRawRecord>?,
    aliased: Table<UpdateRawRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UpdateRawRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.update_raw</code>
         */
        val UPDATE_RAW: UpdateRaw = UpdateRaw()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UpdateRawRecord> = UpdateRawRecord::class.java

    /**
     * The column <code>public.update_raw.id</code>.
     */
    val ID: TableField<UpdateRawRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.update_raw.created</code>.
     */
    val CREATED: TableField<UpdateRawRecord, LocalDateTime?> = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.update_raw.update</code>.
     */
    val UPDATE: TableField<UpdateRawRecord, JSONB?> = createField(DSL.name("update"), SQLDataType.JSONB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<UpdateRawRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UpdateRawRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.update_raw</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.update_raw</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.update_raw</code> table reference
     */
    constructor(): this(DSL.name("update_raw"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UpdateRawRecord>): this(Internal.createPathAlias(child, key), child, key, UPDATE_RAW, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<UpdateRawRecord, Long?> = super.getIdentity() as Identity<UpdateRawRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<UpdateRawRecord> = UPDATE_RAW_PK
    override fun `as`(alias: String): UpdateRaw = UpdateRaw(DSL.name(alias), this)
    override fun `as`(alias: Name): UpdateRaw = UpdateRaw(alias, this)
    override fun `as`(alias: Table<*>): UpdateRaw = UpdateRaw(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UpdateRaw = UpdateRaw(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UpdateRaw = UpdateRaw(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): UpdateRaw = UpdateRaw(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Long?, LocalDateTime?, JSONB?> = super.fieldsRow() as Row3<Long?, LocalDateTime?, JSONB?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, LocalDateTime?, JSONB?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, LocalDateTime?, JSONB?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
