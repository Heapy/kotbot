/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbot.database.tables.records


import io.heapy.kotbot.database.tables.UpdateRaw
import io.heapy.kotbot.database.tables.interfaces.IUpdateRaw

import java.time.LocalDateTime

import org.jooq.JSONB
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UpdateRawRecord private constructor() : UpdatableRecordImpl<UpdateRawRecord>(UpdateRaw.UPDATE_RAW), IUpdateRaw {

    open override var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open override var created: LocalDateTime
        set(value): Unit = set(1, value)
        get(): LocalDateTime = get(1) as LocalDateTime

    open override var update: JSONB
        set(value): Unit = set(2, value)
        get(): JSONB = get(2) as JSONB

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IUpdateRaw) {
        this.id = from.id
        this.created = from.created
        this.update = from.update
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised UpdateRawRecord
     */
    constructor(id: Long? = null, created: LocalDateTime, update: JSONB): this() {
        this.id = id
        this.created = created
        this.update = update
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised UpdateRawRecord
     */
    constructor(value: io.heapy.kotbot.database.tables.pojos.UpdateRaw?): this() {
        if (value != null) {
            this.id = value.id
            this.created = value.created
            this.update = value.update
            resetChangedOnNotNull()
        }
    }
}
