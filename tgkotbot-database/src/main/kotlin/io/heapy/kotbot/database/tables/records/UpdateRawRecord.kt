/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbot.database.tables.records


import io.heapy.kotbot.database.tables.UpdateRaw
import io.heapy.kotbot.database.tables.interfaces.IUpdateRaw

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.JSONB
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UpdateRawRecord private constructor() : UpdatableRecordImpl<UpdateRawRecord>(UpdateRaw.UPDATE_RAW), Record3<Long?, LocalDateTime?, JSONB?>, IUpdateRaw {

    open override var id: Long
        set(value): Unit = set(0, value)
        get(): Long = get(0) as Long

    open override var created: LocalDateTime
        set(value): Unit = set(1, value)
        get(): LocalDateTime = get(1) as LocalDateTime

    open override var update: JSONB
        set(value): Unit = set(2, value)
        get(): JSONB = get(2) as JSONB

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Long?, LocalDateTime?, JSONB?> = super.fieldsRow() as Row3<Long?, LocalDateTime?, JSONB?>
    override fun valuesRow(): Row3<Long?, LocalDateTime?, JSONB?> = super.valuesRow() as Row3<Long?, LocalDateTime?, JSONB?>
    override fun field1(): Field<Long?> = UpdateRaw.UPDATE_RAW.ID
    override fun field2(): Field<LocalDateTime?> = UpdateRaw.UPDATE_RAW.CREATED
    override fun field3(): Field<JSONB?> = UpdateRaw.UPDATE_RAW.UPDATE
    override fun component1(): Long = id
    override fun component2(): LocalDateTime = created
    override fun component3(): JSONB = update
    override fun value1(): Long = id
    override fun value2(): LocalDateTime = created
    override fun value3(): JSONB = update

    override fun value1(value: Long?): UpdateRawRecord {
        set(0, value)
        return this
    }

    override fun value2(value: LocalDateTime?): UpdateRawRecord {
        set(1, value)
        return this
    }

    override fun value3(value: JSONB?): UpdateRawRecord {
        set(2, value)
        return this
    }

    override fun values(value1: Long?, value2: LocalDateTime?, value3: JSONB?): UpdateRawRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IUpdateRaw) {
        id = from.id
        created = from.created
        update = from.update
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised UpdateRawRecord
     */
    constructor(id: Long, created: LocalDateTime, update: JSONB): this() {
        this.id = id
        this.created = created
        this.update = update
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised UpdateRawRecord
     */
    constructor(value: io.heapy.kotbot.database.tables.pojos.UpdateRaw?): this() {
        if (value != null) {
            this.id = value.id
            this.created = value.created
            this.update = value.update
            resetChangedOnNotNull()
        }
    }
}
